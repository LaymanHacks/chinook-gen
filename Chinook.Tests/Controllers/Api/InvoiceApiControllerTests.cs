//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;
using Chinook.Web.UI.Controllers.Api;

namespace Chinook.Web.UI.Tests.Controllers.Api
{
    [TestClass()]
    public class InvoiceApiControllerTests
    {

        private Mock<IInvoiceRepository> _repository;

        private List<Invoice> _repositoryList = new List<Invoice>
        {
            new Invoice(1,2,Convert.ToDateTime("Jan  1 2009 12:00AM"),"Theodor-Heuss-Straße 34","Stuttgart","","Germany","70174",1.98m),
            new Invoice(2,2,Convert.ToDateTime("Jan  2 2009 12:00AM"),"Ullevålsveien 14","Oslo","","Norway","0171",3.96m),
            new Invoice(3,2,Convert.ToDateTime("Jan  3 2009 12:00AM"),"Grétrystraat 63","Brussels","","Belgium","1000",5.94m),
            new Invoice(4,14,Convert.ToDateTime("Jan  6 2009 12:00AM"),"8210 111 ST NW","Edmonton","AB","Canada","T6G 2C7",8.91m),
            new Invoice(5,23,Convert.ToDateTime("Jan 11 2009 12:00AM"),"69 Salem Street","Boston","MA","USA","2113",13.86m),
            new Invoice(6,37,Convert.ToDateTime("Jan 19 2009 12:00AM"),"Berger Straße 10","Frankfurt","","Germany","60316",0.99m),
            new Invoice(7,38,Convert.ToDateTime("Feb  1 2009 12:00AM"),"Barbarossastraße 19","Berlin","","Germany","10779",1.98m),
            new Invoice(8,40,Convert.ToDateTime("Feb  1 2009 12:00AM"),"8, Rue Hanovre","Paris","","France","75002",1.98m),
            new Invoice(9,42,Convert.ToDateTime("Feb  2 2009 12:00AM"),"9, Place Louis Barthou","Bordeaux","","France","33000",3.96m),
            new Invoice(10,46,Convert.ToDateTime("Feb  3 2009 12:00AM"),"3 Chatham Street","Dublin","Dublin","Ireland","",5.94m)
        };

        private InvoiceApiController _target;

        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IInvoiceRepository>();
            _target = new InvoiceApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Invoices") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }

        [TestMethod()]
        public void GetDataTest()
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);

            var result = _target.GetData().ToList();
            Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Invoice()
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<DateTime>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Decimal>()))
                 .Callback<Int32, Int32, DateTime, String, String, String, String, String, Decimal>((invoiceId, customerId, invoiceDate, billingAddress, billingCity, billingState, billingCountry, billingPostalCode, total) =>
                 {
                     var tInvoice = _repositoryList.Find(x => x.InvoiceId == invoiceId);
                     tInvoice.CustomerId = customerId;
                     tInvoice.InvoiceDate = invoiceDate;
                     tInvoice.BillingAddress = billingAddress;
                     tInvoice.BillingCity = billingCity;
                     tInvoice.BillingState = billingState;
                     tInvoice.BillingCountry = billingCountry;
                     tInvoice.BillingPostalCode = billingPostalCode;
                     tInvoice.Total = total;
                 });
            var tempInvoice = _repositoryList.Find(x => x.InvoiceId == 1);
            var testInvoice = new Invoice
            {
                InvoiceId = tempInvoice.InvoiceId,
                CustomerId = tempInvoice.CustomerId,
                InvoiceDate = tempInvoice.InvoiceDate,
                BillingAddress = tempInvoice.BillingAddress,
                BillingCity = tempInvoice.BillingCity,
                BillingState = tempInvoice.BillingState,
                BillingCountry = tempInvoice.BillingCountry,
                BillingPostalCode = tempInvoice.BillingPostalCode,
                Total = tempInvoice.Total
            };

            testInvoice.BillingCity = "newValue"; 
            _target.Update(testInvoice);
            Assert.AreEqual("newValue", _repositoryList.Find(x => x.InvoiceId == 1).BillingCity);
           
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Invoice()
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<DateTime>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Decimal>()))
                 .Returns<Int32, Int32, DateTime, String, String, String, String, String, Decimal>((invoiceId, customerId, invoiceDate, billingAddress, billingCity, billingState, billingCountry, billingPostalCode, total) =>
                 {
                     _repositoryList.Add(new Invoice(invoiceId, customerId, invoiceDate, billingAddress, billingCity, billingState, billingCountry, billingPostalCode, total));
                     return invoiceId;
                 });

            _target.Insert(new Invoice(11, 1, DateTime.Today, "billingAddress", "billingCity", "billingState", "billingCountry", "billingPostalCode", 1m));
            Assert.AreEqual(11, _repositoryList.Count());
           
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Invoice()
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))
                 .Callback<Int32>((invoiceId) =>
                 {
                     var i = _repositoryList.FindIndex(q => q.InvoiceId == invoiceId);
                     _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Invoice> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList;
                     switch (sortExpression)
                     {
                         case "InvoiceId":
                             query = new List<Invoice>(query.OrderBy(q => q.InvoiceId));
                             break;
                         case "CustomerId":
                             query = new List<Invoice>(query.OrderBy(q => q.CustomerId));
                             break;
                         case "InvoiceDate":
                             query = new List<Invoice>(query.OrderBy(q => q.InvoiceDate));
                             break;
                         case "BillingAddress":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingAddress));
                             break;
                         case "BillingCity":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingCity));
                             break;
                         case "BillingState":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingState));
                             break;
                         case "BillingCountry":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingCountry));
                             break;
                         case "BillingPostalCode":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingPostalCode));
                             break;
                         case "Total":
                             query = new List<Invoice>(query.OrderBy(q => q.Total));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("InvoiceId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.InvoiceId).FirstOrDefault().InvoiceId, expectedResult.Results.FirstOrDefault().InvoiceId);
        }

        [TestMethod()]
        public void GetDataByInvoiceIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByInvoiceId(It.IsAny<Int32>()))
                     .Returns<Int32>((invoiceId) =>
                     {
                         return _repositoryList.Where(x => x.InvoiceId == invoiceId).ToList();
                     });

            var result = _target.GetDataByInvoiceId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.InvoiceId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByCustomerIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByCustomerId(It.IsAny<Int32>()))
                     .Returns<Int32>((customerId) =>
                     {
                         return _repositoryList.Where(x => x.CustomerId == customerId).ToList();
                     });

            var result = _target.GetDataByCustomerId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.CustomerId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByCustomerIdPageableTest()
        {
            PagedResult<Invoice> expectedResult;

            _repository
                 .Setup(it => it.GetDataByCustomerIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((customerId, sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList.Where(x => x.CustomerId == customerId);
                     switch (sortExpression)
                     {
                         case "InvoiceId":
                             query = new List<Invoice>(query.OrderBy(q => q.InvoiceId));
                             break;
                         case "CustomerId":
                             query = new List<Invoice>(query.OrderBy(q => q.CustomerId));
                             break;
                         case "InvoiceDate":
                             query = new List<Invoice>(query.OrderBy(q => q.InvoiceDate));
                             break;
                         case "BillingAddress":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingAddress));
                             break;
                         case "BillingCity":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingCity));
                             break;
                         case "BillingState":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingState));
                             break;
                         case "BillingCountry":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingCountry));
                             break;
                         case "BillingPostalCode":
                             query = new List<Invoice>(query.OrderBy(q => q.BillingPostalCode));
                             break;
                         case "Total":
                             query = new List<Invoice>(query.OrderBy(q => q.Total));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByCustomerIdRowCount(2))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByCustomerIdPageable(2, "InvoiceId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.CustomerId == 2).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.CustomerId == 2).OrderBy(q => q.InvoiceId).FirstOrDefault().InvoiceId, expectedResult.Results.FirstOrDefault().InvoiceId);
        }


    }
}
