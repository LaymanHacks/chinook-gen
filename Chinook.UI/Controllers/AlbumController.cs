//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Web.Http;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers
{
    public class AlbumController : ApiController
    {
        private readonly IAlbumRepository _dbRepository;

        public AlbumController(IDbAlbumCommandProvider sqlDbCommanProvider)
        {
            _dbRepository = new DbAlbumRepository(sqlDbCommanProvider);
        }

        public IQueryable<Album> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        public void Update(Int32 albumId, string title, Int32 artistId)
        {
            _dbRepository.Update(albumId, title, artistId);
        }

        public Int32 Insert(Int32 albumId, string title, Int32 artistId)
        {
            return _dbRepository.Insert(albumId, title, artistId);
        }

        public void Delete(Int32 albumId)
        {
            _dbRepository.Delete(albumId);
        }

        public IQueryable<Album> GetPagableSubSet(string sortExpression, Int32 startRowIndex, Int32 maximumRows)
        {
            return _dbRepository.GetPagableSubSet(sortExpression, startRowIndex, maximumRows).AsQueryable();
        }

        public Int32 GetRowCount()
        {
            return _dbRepository.GetRowCount();
        }

        public IQueryable<Album> GetDataByAlbumId(Int32 albumId)
        {
            return _dbRepository.GetDataByAlbumId(albumId).AsQueryable();
        }

        public IQueryable<Album> GetDataByArtistId(Int32 artistId)
        {
            return _dbRepository.GetDataByArtistId(artistId).AsQueryable();
        }

        public IQueryable<Album> GetDataByArtistIdPagableSubSet(string sortExpression, Int32 startRowIndex,
            Int32 maximumRows, Int32 artistId)
        {
            return
                _dbRepository.GetDataByArtistIdPagableSubSet(sortExpression, startRowIndex, maximumRows, artistId)
                    .AsQueryable();
        }

        public Int32 GetDataByArtistIdRowCount(Int32 artistId)
        {
            return _dbRepository.GetDataByArtistIdRowCount(artistId);
        }
    }
}