//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class MediaTypeApiController : ApiController
    {
        private readonly IMediaTypeRepository _dbRepository;

        public MediaTypeApiController(IDbMediaTypeCommandProvider dbCommandProvider)
        {
            _dbRepository = new DbMediaTypeRepository(dbCommandProvider);
        }

        [Route("api/mediaTypes/all", Name = "GetDataRoute")]
        [HttpGet]
        public IQueryable<MediaType> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [HttpPut]
        public void Update(Int32 mediaTypeId, String name)
        {
            _dbRepository.Update(mediaTypeId, name);
        }


        [HttpPut]
        public void Update(MediaType mediaType)
        {
            Update((Int32)mediaType.MediaTypeId, mediaType.Name);
        }

        [HttpPost]
        public Int32 Insert(Int32 mediaTypeId, String name)
        {
            return _dbRepository.Insert(mediaTypeId, name);
        }


        [HttpPost]
        public Int32 Insert(MediaType mediaType)
        {
            return Insert((Int32)mediaType.MediaTypeId, mediaType.Name);
        }

        [HttpDelete]
        public void Delete(Int32 mediaTypeId)
        {
            _dbRepository.Delete(mediaTypeId);
        }


        [HttpDelete]
        public void Delete(MediaType mediaType)
        {
            Delete((Int32)mediaType.MediaTypeId);
        }

        [Route("api/mediaTypes", Name = "GetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "GetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/mediaTypes/{mediaTypeId}", Name = "GetmediaTypesByMediaTypeIdRoute")]
        [HttpGet]
        public IQueryable<MediaType> GetDataByMediaTypeId(Int32 mediaTypeId)
        {
            return _dbRepository.GetDataByMediaTypeId(mediaTypeId).AsQueryable();
        }


    }
}
