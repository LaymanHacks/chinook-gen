'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports Chinook.Data.DbCommandProvider

Namespace Chinook.Data.SqlDbCommandProvider


    Public Class SqlDbEmployeeCommandProvider
        Implements IDbEmployeeCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName() As String Implements IDbEmployeeCommandProvider.DbConnectionName
            Get
                Return "ChinookConnection"
            End Get
        End Property

        Public ReadOnly Property EmployeeDbConnectionHolder() As DbConnectionHolder Implements IDbEmployeeCommandProvider.EmployeeDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        ''' Selects one or more records from the Employee table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbEmployeeCommandProvider.GetGetDataDbCommand


            Dim command As New SqlCommand("Employee_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Updates one or more records from the Employee table 
        ''' </summary>
        ''' <param name="employeeId" />
        ''' <param name="lastName" />
        ''' <param name="firstName" />
        ''' <param name="title" />
        ''' <param name="reportsTo" />
        ''' <param name="birthDate" />
        ''' <param name="hireDate" />
        ''' <param name="address" />
        ''' <param name="city" />
        ''' <param name="state" />
        ''' <param name="country" />
        ''' <param name="postalCode" />
        ''' <param name="phone" />
        ''' <param name="fax" />
        ''' <param name="email" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand(ByVal employeeId As Int32, ByVal lastName As String, ByVal firstName As String, ByVal title As String, ByVal reportsTo As Int32, ByVal birthDate As DateTime, ByVal hireDate As DateTime, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String) As IDbCommand Implements IDbEmployeeCommandProvider.GetUpdateDbCommand


            Dim command As New SqlCommand("Employee_Update")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@EmployeeId", SqlDbType.Int, employeeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.NVarChar, lastName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.NVarChar, firstName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.NVarChar, title))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReportsTo", SqlDbType.Int, reportsTo))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BirthDate", SqlDbType.DateTime, birthDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@HireDate", SqlDbType.DateTime, hireDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Address", SqlDbType.NVarChar, address))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@City", SqlDbType.NVarChar, city))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@State", SqlDbType.NVarChar, state))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Country", SqlDbType.NVarChar, country))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PostalCode", SqlDbType.NVarChar, postalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone", SqlDbType.NVarChar, phone))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Fax", SqlDbType.NVarChar, fax))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Inserts a record into the Employee table on the database.
        ''' </summary>
        ''' <param name="employeeId" />
        ''' <param name="lastName" />
        ''' <param name="firstName" />
        ''' <param name="title" />
        ''' <param name="reportsTo" />
        ''' <param name="birthDate" />
        ''' <param name="hireDate" />
        ''' <param name="address" />
        ''' <param name="city" />
        ''' <param name="state" />
        ''' <param name="country" />
        ''' <param name="postalCode" />
        ''' <param name="phone" />
        ''' <param name="fax" />
        ''' <param name="email" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand(ByVal employeeId As Int32, ByVal lastName As String, ByVal firstName As String, ByVal title As String, ByVal reportsTo As Int32, ByVal birthDate As DateTime, ByVal hireDate As DateTime, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String) As IDbCommand Implements IDbEmployeeCommandProvider.GetInsertDbCommand


            Dim command As New SqlCommand("Employee_Insert")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@EmployeeId", SqlDbType.Int, employeeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.NVarChar, lastName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.NVarChar, firstName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.NVarChar, title))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReportsTo", SqlDbType.Int, reportsTo))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BirthDate", SqlDbType.DateTime, birthDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@HireDate", SqlDbType.DateTime, hireDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Address", SqlDbType.NVarChar, address))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@City", SqlDbType.NVarChar, city))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@State", SqlDbType.NVarChar, state))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Country", SqlDbType.NVarChar, country))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PostalCode", SqlDbType.NVarChar, postalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone", SqlDbType.NVarChar, phone))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Fax", SqlDbType.NVarChar, fax))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Deletes one or more records from the Employee table 
        ''' </summary>
        ''' <param name="employeeId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand(ByVal employeeId As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetDeleteDbCommand


            Dim command As New SqlCommand("Employee_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@EmployeeId", SqlDbType.Int, employeeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Employee
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="maximumRows" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetGetPageableDbCommand


            Dim command As New SqlCommand("Employee_GetPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@MaximumRows", SqlDbType.Int, maximumRows))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Employee
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbEmployeeCommandProvider.GetGetRowCountDbCommand


            Dim command As New SqlCommand("Employee_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataByEmployeeId returns a IDataReader for Employee
        ''' </summary>
        ''' <param name="employeeId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByEmployeeIdDbCommand(ByVal employeeId As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetGetDataByEmployeeIdDbCommand


            Dim command As New SqlCommand("Employee_GetDataByEmployeeId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@EmployeeId", SqlDbType.Int, employeeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataByReportsTo returns a IDataReader for Employee
        ''' </summary>
        ''' <param name="reportsTo" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByReportsToDbCommand(ByVal reportsTo As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetGetDataByReportsToDbCommand


            Dim command As New SqlCommand("Employee_GetDataByReportsTo")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReportsTo", SqlDbType.Int, reportsTo))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Employee
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="maximumRows" />
        ''' <param name="reportsTo" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByReportsToPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32, ByVal reportsTo As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetGetDataByReportsToPageableDbCommand


            Dim command As New SqlCommand("Employee_GetDataByReportsToPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@MaximumRows", SqlDbType.Int, maximumRows))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReportsTo", SqlDbType.Int, reportsTo))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Employee
        ''' </summary>
        ''' <param name="reportsTo" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByReportsToRowCountDbCommand(ByVal reportsTo As Int32) As IDbCommand Implements IDbEmployeeCommandProvider.GetGetDataByReportsToRowCountDbCommand


            Dim command As New SqlCommand("Employee_GetDataByReportsToRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReportsTo", SqlDbType.Int, reportsTo))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


    End Class
End Namespace
