//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class CustomerApiController : ApiController
    {
        private readonly ICustomerRepository _dbRepository;

        public CustomerApiController(IDbCustomerCommandProvider dbCommandProvider)
        {
            _dbRepository = new DbCustomerRepository(dbCommandProvider);
        }

        [HttpGet]
        public IQueryable<Customer> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [HttpPut]
        public void Update(Int32 customerId, String firstName, String lastName, String company, String address, String city, String state, String country, String postalCode, String phone, String fax, String email, int supportRepId)
        {
            _dbRepository.Update(customerId, firstName, lastName, company, address, city, state, country, postalCode, phone, fax, email, supportRepId);
        }


        [HttpPut]
        public void Update(Customer customer)
        {
            if (customer.SupportRepId != null)
                Update(customer.CustomerId, customer.FirstName, customer.LastName, customer.Company, customer.Address, customer.City, customer.State, customer.Country, customer.PostalCode, customer.Phone, customer.Fax, customer.Email, (int) customer.SupportRepId);
        }

        [HttpPost]
        public Int32 Insert(Int32 customerId, String firstName, String lastName, String company, String address, String city, String state, String country, String postalCode, String phone, String fax, String email, Int32 supportRepId)
        {
            return _dbRepository.Insert(customerId, firstName, lastName, company, address, city, state, country, postalCode, phone, fax, email, supportRepId);
        }


        [HttpPost]
        public Int32 Insert(Customer customer)
        {
            if (customer.SupportRepId != null)
                return Insert(customer.CustomerId, customer.FirstName, customer.LastName, customer.Company, customer.Address, customer.City, customer.State, customer.Country, customer.PostalCode, customer.Phone, customer.Fax, customer.Email, (int) customer.SupportRepId);
            return -1;
        }

        [HttpDelete]
        public void Delete(Int32 customerId)
        {
            _dbRepository.Delete(customerId);
        }


        [HttpDelete]
        public void Delete(Customer customer)
        {
            Delete(customer.CustomerId);
        }

        [HttpGet]
        public HttpResponseMessage GetPageableSubSet(String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetPageable( sortExpression, (page - 1) * pageSize, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "GetPageableSubSetRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/customers/{customerId}", Name = "GetDataByCustomerIdRoute")]
        [HttpGet]
        public IQueryable<Customer> GetDataByCustomerId(Int32 customerId)
        {
            return _dbRepository.GetDataByCustomerId(customerId).AsQueryable();
        }

        [Route("api/employees/{supportRepId}/customers/all", Name = "GetDataBySupportRepIdRoute")]
        [HttpGet]
        public IQueryable<Customer> GetDataBySupportRepId(Int32 supportRepId)
        {
            return _dbRepository.GetDataBySupportRepId(supportRepId).AsQueryable();
        }

        [Route("api/employees/{supportRepId}/customers", Name = "GetDataBySupportRepIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataBySupportRepIdPageableSubSet(Int32 supportRepId, string sortExpression = "CustomerId", Int32 page = 1, Int32 pageSize = 10)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataBySupportRepIdPageable(sortExpression, (page - 1) * pageSize, pageSize, supportRepId);
            var totalCount = _dbRepository.GetDataBySupportRepIdRowCount(supportRepId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "GetDataBySupportRepIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
