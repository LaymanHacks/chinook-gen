//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;
using Chinook.Web.UI.Controllers.Api;

namespace Chinook.Web.UI.Tests.Controllers.Api
{
    [TestClass()]
    public class MediaTypeApiControllerTests
    {

        private Mock<IMediaTypeRepository> _repository;

        private List<MediaType> _repositoryList = new List<MediaType>
        {
                new MediaType(1,"MPEG audio file"),
                new MediaType(2,"Protected AAC audio file"),
                new MediaType(3,"Protected MPEG-4 video file"),
                new MediaType(4,"Purchased AAC audio file"),
                new MediaType(5,"AAC audio file")
        };

        private MediaTypeApiController _target;

        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IMediaTypeRepository>();
            _target = new MediaTypeApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/MediaTypes") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }

        [TestMethod()]
        public void GetDataTest()
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);

            var result = _target.GetData().ToList();
            Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_MediaType()
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<String>()))
                 .Callback<Int32, String>((mediaTypeId, name) =>
                 {
                     var tMediaType = _repositoryList.Find(x => x.MediaTypeId == mediaTypeId);
                     tMediaType.Name = name;
                 });
            var tempMediaType = _repositoryList.Find(x => x.MediaTypeId == 1);
            var testMediaType = new MediaType
            {
                MediaTypeId = tempMediaType.MediaTypeId,
                Name = tempMediaType.Name
            };

             testMediaType.Name = "newValue"; 
            _target.Update(testMediaType);
            Assert.AreEqual("newValue", _repositoryList.Find(x => x.MediaTypeId==1).Name);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_MediaType()
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<String>()))
                 .Returns<Int32, String>((mediaTypeId, name) =>
                 {
                     _repositoryList.Add(new MediaType(mediaTypeId, name));
                     return mediaTypeId;
                 });

           _target.Insert(new MediaType(6, "name"));
            Assert.AreEqual(6, _repositoryList.Count());
           
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_MediaType()
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))
                 .Callback<Int32>((mediaTypeId) =>
                 {
                     var i = _repositoryList.FindIndex(q => q.MediaTypeId == mediaTypeId);
                     _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<MediaType> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList;
                     switch (sortExpression)
                     {
                         case "MediaTypeId":
                             query = new List<MediaType>(query.OrderBy(q => q.MediaTypeId));
                             break;
                         case "Name":
                             query = new List<MediaType>(query.OrderBy(q => q.Name));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("MediaTypeId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.MediaTypeId).FirstOrDefault().MediaTypeId, expectedResult.Results.FirstOrDefault().MediaTypeId);
        }

        [TestMethod()]
        public void GetDataByMediaTypeIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByMediaTypeId(It.IsAny<Int32>()))
                     .Returns<Int32>((mediaTypeId) => _repositoryList.Where(x => x.MediaTypeId == mediaTypeId).ToList());

            var result = _target.GetDataByMediaTypeId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.MediaTypeId == 1).ToList().Count, result.Count);
        }


    }
}
