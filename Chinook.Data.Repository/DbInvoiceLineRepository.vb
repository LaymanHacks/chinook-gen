'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports Chinook.Data
Imports Chinook.Domain.Entities
Imports Chinook.Data.DbCommandProvider
Imports System.Collections.ObjectModel


Namespace Chinook.Data.Repository

    <Global.System.ComponentModel.DataObjectAttribute(True)> _
    Public Class DbInvoiceLineRepository
        Implements IInvoiceLineRepository
        Implements IDisposable

        Private ReadOnly _dbInvoiceLineCommandProvider As IDbInvoiceLineCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbInvoiceLineCommandProvider As IDbInvoiceLineCommandProvider)
            _dbInvoiceLineCommandProvider = dbInvoiceLineCommandProvider
            _dbConnHolder = _dbInvoiceLineCommandProvider.InvoiceLineDbConnectionHolder
        End Sub


        ''' <summary>
        ''' Selects one or more records from the InvoiceLine table 
        ''' </summary>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Function GetData() As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetData
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Updates one or more records from the InvoiceLine table 
        ''' </summary>
        ''' <param name="InvoiceLineId"></param>
        ''' <param name="InvoiceId"></param>
        ''' <param name="TrackId"></param>
        ''' <param name="UnitPrice"></param>
        ''' <param name="Quantity"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Sub Update(ByVal invoiceLineId As Int32, ByVal invoiceId As Int32, ByVal trackId As Int32, ByVal unitPrice As Decimal, ByVal quantity As Int32) Implements IInvoiceLineRepository.Update
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetUpdateDbCommand(invoiceLineId, invoiceId, trackId, unitPrice, quantity)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        ''' Updates one or more records from the InvoiceLine table 
        ''' </summary>
        ''' <param name="InvoiceLine"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Sub Update(ByVal invoiceLine As InvoiceLine) Implements IInvoiceLineRepository.Update
            With invoiceLine
                Update(.InvoiceLineId, .InvoiceId, .TrackId, .UnitPrice, .Quantity)
            End With

        End Sub

        ''' <summary>
        ''' Inserts an entity of InvoiceLine into the database.
        ''' </summary>
        ''' <param name="InvoiceLineId"></param>
        ''' <param name="InvoiceId"></param>
        ''' <param name="TrackId"></param>
        ''' <param name="UnitPrice"></param>
        ''' <param name="Quantity"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Function Insert(ByVal invoiceLineId As Int32, ByVal invoiceId As Int32, ByVal trackId As Int32, ByVal unitPrice As Decimal, ByVal quantity As Int32) As Int32 Implements IInvoiceLineRepository.Insert
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetInsertDbCommand(invoiceLineId, invoiceId, trackId, unitPrice, quantity)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Inserts an entity of InvoiceLine into the database.
        ''' </summary>
        ''' <param name="InvoiceLine"></param>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _
        Public Function Insert(ByVal invoiceLine As InvoiceLine) As Int32 Implements IInvoiceLineRepository.Insert
            With invoiceLine
                Return Insert(.InvoiceLineId, .InvoiceId, .TrackId, .UnitPrice, .Quantity)
            End With

        End Function

        ''' <summary>
        ''' Deletes one or more records from the InvoiceLine table 
        ''' </summary>
        ''' <param name="InvoiceLineId"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Sub Delete(ByVal invoiceLineId As Int32) Implements IInvoiceLineRepository.Delete
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetDeleteDbCommand(invoiceLineId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        ''' Deletes one or more records from the InvoiceLine table 
        ''' </summary>
        ''' <param name="InvoiceLine"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _
        Public Sub Delete(ByVal invoiceLine As InvoiceLine) Implements IInvoiceLineRepository.Delete
            With invoiceLine
                Delete(.InvoiceLineId)
            End With

        End Sub

        ''' <summary>
        ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from InvoiceLine
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="startRowIndex"></param>
        ''' <param name="MaximumRows"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetPagableSubSet(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetPagableSubSet
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetPagableSubSetDbCommand(sortExpression, startRowIndex, maximumRows)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for InvoiceLine
        ''' </summary>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetRowCount() As Int32 Implements IInvoiceLineRepository.GetRowCount
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByInvoiceLineId returns a IDataReader for InvoiceLine
        ''' </summary>
        ''' <param name="InvoiceLineId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByInvoiceLineId(ByVal invoiceLineId As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetDataByInvoiceLineId
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByInvoiceLineIdDbCommand(invoiceLineId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByInvoiceId returns a IDataReader for InvoiceLine
        ''' </summary>
        ''' <param name="InvoiceId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByInvoiceId(ByVal invoiceId As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetDataByInvoiceId
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByInvoiceIdDbCommand(invoiceId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from InvoiceLine
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="startRowIndex"></param>
        ''' <param name="MaximumRows"></param>
        ''' <param name="InvoiceId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByInvoiceIdPagableSubSet(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32, ByVal invoiceId As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetDataByInvoiceIdPagableSubSet
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByInvoiceIdPagableSubSetDbCommand(sortExpression, startRowIndex, maximumRows, invoiceId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for InvoiceLine
        ''' </summary>
        ''' <param name="InvoiceId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByInvoiceIdRowCount(ByVal invoiceId As Int32) As Int32 Implements IInvoiceLineRepository.GetDataByInvoiceIdRowCount
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByInvoiceIdRowCountDbCommand(invoiceId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByTrackId returns a IDataReader for InvoiceLine
        ''' </summary>
        ''' <param name="TrackId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByTrackId(ByVal trackId As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetDataByTrackId
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByTrackIdDbCommand(trackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from InvoiceLine
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="startRowIndex"></param>
        ''' <param name="MaximumRows"></param>
        ''' <param name="TrackId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByTrackIdPagableSubSet(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32, ByVal trackId As Int32) As ICollection(Of InvoiceLine) Implements IInvoiceLineRepository.GetDataByTrackIdPagableSubSet
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByTrackIdPagableSubSetDbCommand(sortExpression, startRowIndex, maximumRows, trackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of InvoiceLine)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New InvoiceLine(reader.GetInt32("InvoiceLineId"), reader.GetInt32("InvoiceId"), reader.GetInt32("TrackId"), reader.GetDecimal("UnitPrice"), reader.GetInt32("Quantity"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for InvoiceLine
        ''' </summary>
        ''' <param name="TrackId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByTrackIdRowCount(ByVal trackId As Int32) As Int32 Implements IInvoiceLineRepository.GetDataByTrackIdRowCount
            Dim command As IDbCommand = _dbInvoiceLineCommandProvider.GetGetDataByTrackIdRowCountDbCommand(trackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function


#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace
