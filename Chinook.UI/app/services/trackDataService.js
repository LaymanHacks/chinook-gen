//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
(function () {
    'use strict';

    var serviceId = 'trackDataService';
    angular.module('app').service(serviceId, ['$http', trackDataService]);

    function trackDataService($http) {
        var urlBase = '/api/tracks';            

        this.getData = function () {
            return $http.get(urlBase  + '/all');
        };

        this.updateTrack = function(track) {
            return $http.put(urlBase, track);
        };

        this.insertTrack = function(track) {
            return $http.post(urlBase, track);
        };

        this.deleteTrack = function(trackId) {
            return $http.Delete(urlBase, trackId);
        };

        this.getDataPageable = function (sortExpression, page, pageSize) { 
            return $http({
                url: urlBase ,
                method: 'GET',
                params: {
                    sortExpression : sortExpression || '', 
                    page : page || '', 
                    pageSize : pageSize || ''
                }
            });
        };

        this.getDataByTrackId = function (trackId) {
            return $http.get(urlBase + '/' + trackId);
        };

        this.getTracksByPlaylistId = function (playlistId) {
            return $http.get('/api/playlists/' + playlistId + '/tracks/all');
        };

        this.getTracksByPlaylistIdPageable = function (playlistId, sortExpression, page, pageSize) { 
            return $http({
                url: '/api/playlists/' + playlistId + '/tracks',
                method: 'GET',
                params: {
                    playlistId : playlistId || '', 
                    sortExpression : sortExpression || '', 
                    page : page || '', 
                    pageSize : pageSize || ''
                }
            });
        };

        this.getDataByAlbumId = function (albumId) {
            return $http.get('/api/albums/' + albumId + '/tracks/all');
        };

        this.getDataByAlbumIdPageable = function (albumId, sortExpression, page, pageSize) { 
            return $http({
                url: '/api/albums/' + albumId + '/tracks',
                method: 'GET',
                params: {
                    albumId : albumId || '', 
                    sortExpression : sortExpression || '', 
                    page : page || '', 
                    pageSize : pageSize || ''
                }
            });
        };

        this.getDataByGenreId = function (genreId) {
            return $http.get('/api/genres/' + genreId + '/tracks/all');
        };

        this.getDataByGenreIdPageable = function (genreId, sortExpression, page, pageSize) { 
            return $http({
                url: '/api/genres/' + genreId + '/tracks',
                method: 'GET',
                params: {
                    genreId : genreId || '', 
                    sortExpression : sortExpression || '', 
                    page : page || '', 
                    pageSize : pageSize || ''
                }
            });
        };

        this.getDataByMediaTypeId = function (mediaTypeId) {
            return $http.get('/api/mediaTypes/' + mediaTypeId + '/tracks/all');
        };

        this.getDataByMediaTypeIdPageable = function (mediaTypeId, sortExpression, page, pageSize) { 
            return $http({
                url: '/api/mediaTypes/' + mediaTypeId + '/tracks',
                method: 'GET',
                params: {
                    mediaTypeId : mediaTypeId || '', 
                    sortExpression : sortExpression || '', 
                    page : page || '', 
                    pageSize : pageSize || ''
                }
            });
        };


    }
})();
