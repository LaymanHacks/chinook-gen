'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports Chinook.Data.DbCommandProvider

Namespace Chinook.Data.SqlDbCommandProvider


    Public Class SqlDbInvoiceCommandProvider
        Implements IDbInvoiceCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName() As String Implements IDbInvoiceCommandProvider.DbConnectionName
            Get
                Return "ChinookConnection"
            End Get
        End Property

        Public ReadOnly Property InvoiceDbConnectionHolder() As DbConnectionHolder Implements IDbInvoiceCommandProvider.InvoiceDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        ''' Selects one or more records from the Invoice table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbInvoiceCommandProvider.GetGetDataDbCommand


            Dim command As New SqlCommand("Invoice_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Updates one or more records from the Invoice table 
        ''' </summary>
        ''' <param name="invoiceId" />
        ''' <param name="customerId" />
        ''' <param name="invoiceDate" />
        ''' <param name="billingAddress" />
        ''' <param name="billingCity" />
        ''' <param name="billingState" />
        ''' <param name="billingCountry" />
        ''' <param name="billingPostalCode" />
        ''' <param name="total" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand(ByVal invoiceId As Int32, ByVal customerId As Int32, ByVal invoiceDate As DateTime, ByVal billingAddress As String, ByVal billingCity As String, ByVal billingState As String, ByVal billingCountry As String, ByVal billingPostalCode As String, ByVal total As Decimal) As IDbCommand Implements IDbInvoiceCommandProvider.GetUpdateDbCommand


            Dim command As New SqlCommand("Invoice_Update")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceId", SqlDbType.Int, invoiceId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceDate", SqlDbType.DateTime, invoiceDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingAddress", SqlDbType.NVarChar, billingAddress))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingCity", SqlDbType.NVarChar, billingCity))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingState", SqlDbType.NVarChar, billingState))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingCountry", SqlDbType.NVarChar, billingCountry))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingPostalCode", SqlDbType.NVarChar, billingPostalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Total", SqlDbType.Decimal, total))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Inserts a record into the Invoice table on the database.
        ''' </summary>
        ''' <param name="invoiceId" />
        ''' <param name="customerId" />
        ''' <param name="invoiceDate" />
        ''' <param name="billingAddress" />
        ''' <param name="billingCity" />
        ''' <param name="billingState" />
        ''' <param name="billingCountry" />
        ''' <param name="billingPostalCode" />
        ''' <param name="total" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand(ByVal invoiceId As Int32, ByVal customerId As Int32, ByVal invoiceDate As DateTime, ByVal billingAddress As String, ByVal billingCity As String, ByVal billingState As String, ByVal billingCountry As String, ByVal billingPostalCode As String, ByVal total As Decimal) As IDbCommand Implements IDbInvoiceCommandProvider.GetInsertDbCommand


            Dim command As New SqlCommand("Invoice_Insert")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceId", SqlDbType.Int, invoiceId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceDate", SqlDbType.DateTime, invoiceDate))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingAddress", SqlDbType.NVarChar, billingAddress))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingCity", SqlDbType.NVarChar, billingCity))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingState", SqlDbType.NVarChar, billingState))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingCountry", SqlDbType.NVarChar, billingCountry))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@BillingPostalCode", SqlDbType.NVarChar, billingPostalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Total", SqlDbType.Decimal, total))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Deletes one or more records from the Invoice table 
        ''' </summary>
        ''' <param name="invoiceId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand(ByVal invoiceId As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetDeleteDbCommand


            Dim command As New SqlCommand("Invoice_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceId", SqlDbType.Int, invoiceId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Invoice
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="maximumRows" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetGetPageableDbCommand


            Dim command As New SqlCommand("Invoice_GetPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@MaximumRows", SqlDbType.Int, maximumRows))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Invoice
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbInvoiceCommandProvider.GetGetRowCountDbCommand


            Dim command As New SqlCommand("Invoice_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataByInvoiceId returns a IDataReader for Invoice
        ''' </summary>
        ''' <param name="invoiceId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByInvoiceIdDbCommand(ByVal invoiceId As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetGetDataByInvoiceIdDbCommand


            Dim command As New SqlCommand("Invoice_GetDataByInvoiceId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@InvoiceId", SqlDbType.Int, invoiceId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataByCustomerId returns a IDataReader for Invoice
        ''' </summary>
        ''' <param name="customerId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByCustomerIdDbCommand(ByVal customerId As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetGetDataByCustomerIdDbCommand


            Dim command As New SqlCommand("Invoice_GetDataByCustomerId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Invoice
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="maximumRows" />
        ''' <param name="customerId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByCustomerIdPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32, ByVal customerId As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetGetDataByCustomerIdPageableDbCommand


            Dim command As New SqlCommand("Invoice_GetDataByCustomerIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@MaximumRows", SqlDbType.Int, maximumRows))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Invoice
        ''' </summary>
        ''' <param name="customerId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByCustomerIdRowCountDbCommand(ByVal customerId As Int32) As IDbCommand Implements IDbInvoiceCommandProvider.GetGetDataByCustomerIdRowCountDbCommand


            Dim command As New SqlCommand("Invoice_GetDataByCustomerIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


    End Class
End Namespace
