'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports Chinook.Data
Imports Chinook.Domain.Entities
Imports Chinook.Data.DbCommandProvider
Imports System.Collections.ObjectModel
  
Namespace Chinook.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbPlaylistTrackRepository
        Implements IPlaylistTrackRepository
        Implements IDisposable

        Private ReadOnly _dbPlaylistTrackCommandProvider As IDbPlaylistTrackCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbPlaylistTrackCommandProvider As IDbPlaylistTrackCommandProvider)
            _dbPlaylistTrackCommandProvider = dbPlaylistTrackCommandProvider
            _dbConnHolder =_dbPlaylistTrackCommandProvider.PlaylistTrackDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the PlaylistTrack table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetData
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the PlaylistTrack table 
    ''' </summary>
   ''' <param name="PlaylistId"></param>
   ''' <param name="TrackId"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal playlistId As Int32,  ByVal trackId As Int32)  Implements IPlaylistTrackRepository.Update
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetUpdateDbCommand(PlaylistId, TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the PlaylistTrack table 
    ''' </summary>
    ''' <param name="PlaylistTrack"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal playlistTrack as PlaylistTrack)  Implements IPlaylistTrackRepository.Update
             With PlaylistTrack
Update(.PlaylistId, .TrackId)
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of PlaylistTrack into the database.
    ''' </summary>
   ''' <param name="PlaylistId"></param>
   ''' <param name="TrackId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal playlistId As Int32,  ByVal trackId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.Insert
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetInsertDbCommand(PlaylistId, TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Inserts an entity of PlaylistTrack into the database.
    ''' </summary>
    ''' <param name="PlaylistTrack"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal playlistTrack as PlaylistTrack)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.Insert
             With PlaylistTrack
 Return Insert(.PlaylistId, .TrackId)
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the PlaylistTrack table 
    ''' </summary>
   ''' <param name="PlaylistId"></param>
   ''' <param name="TrackId"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal playlistId As Int32,  ByVal trackId As Int32)  Implements IPlaylistTrackRepository.Delete
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetDeleteDbCommand(PlaylistId, TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the PlaylistTrack table 
    ''' </summary>
    ''' <param name="PlaylistTrack"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal playlistTrack as PlaylistTrack)  Implements IPlaylistTrackRepository.Delete
             With PlaylistTrack
Delete(.PlaylistId, .TrackId)
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from PlaylistTrack
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="startRowIndex"></param>
   ''' <param name="MaximumRows"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetPagableSubSet( ByVal sortExpression As String,  ByVal startRowIndex As Int32,  ByVal maximumRows As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetPagableSubSet
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetPagableSubSetDbCommand(sortExpression, startRowIndex, MaximumRows)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for PlaylistTrack
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IPlaylistTrackRepository.GetRowCount
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByPlaylistIdTrackId returns a IDataReader for PlaylistTrack
    ''' </summary>
   ''' <param name="PlaylistId"></param>
   ''' <param name="TrackId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPlaylistIdTrackId( ByVal playlistId As Int32,  ByVal trackId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetDataByPlaylistIdTrackId
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByPlaylistIdTrackIdDbCommand(PlaylistId, TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByPlaylistId returns a IDataReader for PlaylistTrack
    ''' </summary>
   ''' <param name="PlaylistId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPlaylistId( ByVal playlistId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetDataByPlaylistId
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByPlaylistIdDbCommand(PlaylistId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from PlaylistTrack
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="startRowIndex"></param>
   ''' <param name="MaximumRows"></param>
   ''' <param name="PlaylistId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPlaylistIdPagableSubSet( ByVal sortExpression As String,  ByVal startRowIndex As Int32,  ByVal maximumRows As Int32,  ByVal playlistId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetDataByPlaylistIdPagableSubSet
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByPlaylistIdPagableSubSetDbCommand(sortExpression, startRowIndex, MaximumRows, PlaylistId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for PlaylistTrack
    ''' </summary>
   ''' <param name="PlaylistId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPlaylistIdRowCount( ByVal playlistId As Int32)  as Int32 Implements IPlaylistTrackRepository.GetDataByPlaylistIdRowCount
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByPlaylistIdRowCountDbCommand(PlaylistId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByTrackId returns a IDataReader for PlaylistTrack
    ''' </summary>
   ''' <param name="TrackId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByTrackId( ByVal trackId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetDataByTrackId
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByTrackIdDbCommand(TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetPagableSubSet returns a IDataReader populated with a subset of data from PlaylistTrack
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="startRowIndex"></param>
   ''' <param name="MaximumRows"></param>
   ''' <param name="TrackId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByTrackIdPagableSubSet( ByVal sortExpression As String,  ByVal startRowIndex As Int32,  ByVal maximumRows As Int32,  ByVal trackId As Int32)  as ICollection(Of PlaylistTrack) Implements IPlaylistTrackRepository.GetDataByTrackIdPagableSubSet
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByTrackIdPagableSubSetDbCommand(sortExpression, startRowIndex, MaximumRows, TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of PlaylistTrack)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New PlaylistTrack( reader.GetInt32("PlaylistId"),  reader.GetInt32("TrackId"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for PlaylistTrack
    ''' </summary>
   ''' <param name="TrackId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByTrackIdRowCount( ByVal trackId As Int32)  as Int32 Implements IPlaylistTrackRepository.GetDataByTrackIdRowCount
        Dim command As IDbCommand = _dbPlaylistTrackCommandProvider.GetGetDataByTrackIdRowCountDbCommand(TrackId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
