//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;
using Chinook.Web.UI.Controllers.Api;

namespace Chinook.Web.UI.Tests.Controllers.Api
{
    [TestClass()]
    public class PlaylistTrackApiControllerTests
    {

        private Mock<IPlaylistTrackRepository> _repository;

        private List<PlaylistTrack> _repositoryList = new List<PlaylistTrack>
        {
            new PlaylistTrack(1,3402),
            new PlaylistTrack(1,3389),
            new PlaylistTrack(1,3390),
            new PlaylistTrack(1,3391),
            new PlaylistTrack(1,3392),
            new PlaylistTrack(1,3393),
            new PlaylistTrack(2,3394),
            new PlaylistTrack(2,3395),
            new PlaylistTrack(2,3396),
            new PlaylistTrack(1,3397)
        };

        private PlaylistTrackApiController _target;

        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IPlaylistTrackRepository>();
            _target = new PlaylistTrackApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/PlaylistTracks") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }

        [TestMethod()]
        public void GetDataTest()
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);

            var result = _target.GetData().ToList();
            Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_PlaylistTrack() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32>((playlistId, trackId) => 
            { 
                 var tPlaylistTrack = _repositoryList.Find(x => x.PlaylistId==playlistId & x.TrackId==trackId);
            });
            var tempPlaylistTrack = _repositoryList.Find(x => x.PlaylistId == 1 & x.TrackId == 3402);
            var testPlaylistTrack = new PlaylistTrack {
                 PlaylistId = tempPlaylistTrack.PlaylistId, 
                 TrackId = tempPlaylistTrack.TrackId};
            
            testPlaylistTrack.TrackId = 3499; 
            _target.Update(testPlaylistTrack);
            Assert.AreEqual(3499, _repositoryList.Find(x => x.PlaylistId == 1 & x.TrackId == 3499).TrackId);
          
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_PlaylistTrack()
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, Int32>((playlistId, trackId) =>
                 {
                     var plTrack = new PlaylistTrack(playlistId, trackId);
                     _repositoryList.Add(plTrack);
                     return _repositoryList;
                 });
            
            _target.Insert(new PlaylistTrack(11, 1));
           Assert.AreEqual(11, _repositoryList.Count());
            
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_PlaylistTrack() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>(), It.IsAny<Int32>()))  
                 .Callback<Int32, Int32>((playlistId, trackId) => 
                 { 
                      var i = _repositoryList.FindIndex(q => q.PlaylistId==playlistId & q.TrackId==trackId);
                      _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1, 3402);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<PlaylistTrack> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList;
                     switch (sortExpression)
                     {
                         case "PlaylistId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.PlaylistId));
                             break;
                         case "TrackId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.TrackId));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("PlaylistId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.PlaylistId).FirstOrDefault().PlaylistId, expectedResult.Results.FirstOrDefault().PlaylistId);
        }

        [TestMethod()]
        public void GetDataByPlaylistIdTrackIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByPlaylistIdTrackId(It.IsAny<Int32>(), It.IsAny<Int32>()))
                     .Returns<Int32, Int32>((playlistId, trackId) => 
                 { 
                      return _repositoryList.Where(x => x.PlaylistId == playlistId & x.TrackId==trackId).ToList();
                 });
                
            var result = _target.GetDataByPlaylistIdTrackId(1, 1).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.PlaylistId==1 & x.TrackId==1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByPlaylistIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByPlaylistId(It.IsAny<Int32>()))
                     .Returns<Int32>((playlistId) =>
                     {
                         return _repositoryList.Where(x => x.PlaylistId == playlistId).ToList();
                     });

            var result = _target.GetDataByPlaylistId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.PlaylistId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByPlaylistIdPageableTest()
        {
            PagedResult<PlaylistTrack> expectedResult;

            _repository
                 .Setup(it => it.GetDataByPlaylistIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((playlistId, sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList.Where(x => x.PlaylistId == playlistId);
                     switch (sortExpression)
                     {
                         case "PlaylistId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.PlaylistId));
                             break;
                         case "TrackId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.TrackId));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByPlaylistIdRowCount(1))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByPlaylistIdPageable(1, "PlaylistId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.PlaylistId == 1).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.PlaylistId == 1).OrderBy(q => q.PlaylistId).FirstOrDefault().PlaylistId, expectedResult.Results.FirstOrDefault().PlaylistId);
        }

        [TestMethod()]
        public void GetDataByTrackIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByTrackId(It.IsAny<Int32>()))
                     .Returns<Int32>((trackId) =>
                     {
                         return _repositoryList.Where(x => x.TrackId == trackId).ToList();
                     });

            var result = _target.GetDataByTrackId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByTrackIdPageableTest()
        {
            PagedResult<PlaylistTrack> expectedResult;

            _repository
                 .Setup(it => it.GetDataByTrackIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((trackId, sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList.Where(x => x.TrackId == trackId);
                     switch (sortExpression)
                     {
                         case "PlaylistId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.PlaylistId));
                             break;
                         case "TrackId":
                             query = new List<PlaylistTrack>(query.OrderBy(q => q.TrackId));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByTrackIdRowCount(1))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByTrackIdPageable(1, "PlaylistId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 1).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 1).OrderBy(q => q.PlaylistId).FirstOrDefault().PlaylistId, expectedResult.Results.FirstOrDefault().PlaylistId);
        }


    }
}
