//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Web.Http;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class GenreApiController : ApiController
    {
        private readonly IGenreRepository _dbRepository;

        public GenreApiController(IDbGenreCommandProvider dbCommandProvider)
        {
            _dbRepository = new DbGenreRepository(dbCommandProvider);
        }

        [HttpGet]
        public IQueryable<Genre> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [HttpPut]
        public void Update(Int32 genreId, String name)
        {
            _dbRepository.Update(genreId, name);
        }


        [HttpPut]
        public void Update(Genre genre)
        {
            Update(genre.GenreId, genre.Name);
        }

        [HttpPost]
        public Int32 Insert(Int32 genreId, String name)
        {
            return _dbRepository.Insert(genreId, name);
        }


        [HttpPost]
        public Int32 Insert(Genre genre)
        {
            return Insert(genre.GenreId, genre.Name);
        }

        [HttpDelete]
        public void Delete(Int32 genreId)
        {
            _dbRepository.Delete(genreId);
        }


        [HttpDelete]
        public void Delete(Genre genre)
        {
            Delete(genre.GenreId);
        }

        [HttpGet]
        public IQueryable<Genre> GetPageable(String sortExpression, Int32 startRowIndex, Int32 maximumRows)
        {
            return _dbRepository.GetPageable(sortExpression, startRowIndex, maximumRows).AsQueryable();
        }

        [HttpGet]
        public Int32 GetRowCount()
        {
            return _dbRepository.GetRowCount();
        }

        [Route("api/genre/{genreId}/genres/all", Name = "GetDataByGenreIdRoute")]
        [HttpGet]
        public IQueryable<Genre> GetDataByGenreId(Int32 genreId)
        {
            return _dbRepository.GetDataByGenreId(genreId).AsQueryable();
        }


    }
}
