//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class EmployeeApiController : ApiController
    {
        private readonly IEmployeeRepository _dbRepository;

        public EmployeeApiController(IEmployeeRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/employees/all", Name = "EmployeesGetDataRoute")]
        [HttpGet]
        public IQueryable<Employee> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/employees", Name = "EmployeesUpdateRoute")]
        [HttpPut]
        public void Update(Employee employee)
        {
            _dbRepository.Update( (Int32)employee.EmployeeId,  (string)employee.LastName,  (string)employee.FirstName, employee.Title, employee.ReportsTo, employee.BirthDate, employee.HireDate, employee.Address, employee.City, employee.State, employee.Country, employee.PostalCode, employee.Phone, employee.Fax, employee.Email);
          }

        [Route("api/employees", Name = "EmployeesInsertRoute")]
        [HttpPost]
        public Int32 Insert(Employee employee)
        {
             return _dbRepository.Insert( (Int32)employee.EmployeeId,  (string)employee.LastName,  (string)employee.FirstName, employee.Title, employee.ReportsTo, employee.BirthDate, employee.HireDate, employee.Address, employee.City, employee.State, employee.Country, employee.PostalCode, employee.Phone, employee.Fax, employee.Email);
          }

        [Route("api/employees", Name = "EmployeesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 employeeId) 
        {
            try
            {
                _dbRepository.Delete(employeeId);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
          
        }

        [Route("api/employees", Name = "EmployeesGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "EmployeesGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/employees/{reportsTo}", Name = "EmployeesGetDataByEmployeeIdRoute")]
        [HttpGet]
        public IQueryable<Employee> GetDataByEmployeeId(Int32 employeeId) 
        {
            return _dbRepository.GetDataByEmployeeId(employeeId).AsQueryable();
        }

        [Route("api/employees/{reportsTo}", Name = "EmployeesGetDataByReportsToRoute")]
        [HttpGet]
        public IQueryable<Employee> GetDataByReportsTo(Int32 reportsTo) 
        {
            return _dbRepository.GetDataByReportsTo(reportsTo).AsQueryable();
        }

        [Route("api/employees/{reportsTo}/all", Name = "EmployeesGetDataByReportsToPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByReportsToPageable(Int32 reportsTo, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByReportsToPageable(reportsTo, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByReportsToRowCount(reportsTo);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "EmployeesGetDataByReportsToPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
