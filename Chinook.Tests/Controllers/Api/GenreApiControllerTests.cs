//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;
using Chinook.Web.UI.Controllers.Api;

namespace Chinook.Web.UI.Tests.Controllers.Api
{
    [TestClass()]
    public class GenreApiControllerTests
    {

        private Mock<IGenreRepository> _repository;

        private List<Genre> _repositoryList = new List<Genre>
        {
                new Genre(1,"Rock"),
                new Genre(2,"Jazz"),
                new Genre(3,"Metal"),
                new Genre(4,"Alternative & Punk"),
                new Genre(5,"Rock And Roll"),
                new Genre(6,"Blues"),
                new Genre(7,"Latin"),
                new Genre(8,"Reggae"),
                new Genre(9,"Pop"),
                new Genre(10,"Soundtrack")
        };

        private GenreApiController _target;

        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IGenreRepository>();
            _target = new GenreApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Genres") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }

        [TestMethod()]
        public void GetDataTest()
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);

            var result = _target.GetData().ToList();
            Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Genre()
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<String>()))
                 .Callback<Int32, String>((genreId, name) =>
                 {
                     var tGenre = _repositoryList.Find(x => x.GenreId == genreId);
                     tGenre.Name = name;
                 });
            var tempGenre = _repositoryList.Find(x => x.GenreId == 1);
            var testGenre = new Genre
            {
                GenreId = tempGenre.GenreId,
                Name = tempGenre.Name
            };

            
            testGenre.Name = "TestValue"; 
            _target.Update(testGenre);
            Assert.AreEqual("TestValue", _repositoryList.Find(x => x.GenreId == 1).Name);
          
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Genre()
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<String>()))
                 .Returns<Int32, String>((genreId, name) =>
                 {
                     _repositoryList.Add(new Genre(genreId, name));
                     return genreId;
                 });

            _target.Insert(new Genre(11, "Name"));
            Assert.AreEqual(11, _repositoryList.Count);

        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Genre()
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))
                 .Callback<Int32>((genreId) =>
                 {
                     var i = _repositoryList.FindIndex(q => q.GenreId == genreId);
                     _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Genre> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList;
                     switch (sortExpression)
                     {
                         case "GenreId":
                             query = new List<Genre>(query.OrderBy(q => q.GenreId));
                             break;
                         case "Name":
                             query = new List<Genre>(query.OrderBy(q => q.Name));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("GenreId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.GenreId).FirstOrDefault().GenreId, expectedResult.Results.FirstOrDefault().GenreId);
            Assert.AreEqual(_repositoryList.ToList().Count, expectedResult.TotalCount);
        }

        [TestMethod()]
        public void GetDataByGenreIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByGenreId(It.IsAny<Int32>()))
                     .Returns<Int32>((genreId) =>
                     {
                         return _repositoryList.Where(x => x.GenreId == genreId).ToList();
                     });

            var result = _target.GetDataByGenreId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.GenreId == 1).ToList().Count, result.Count);
        }


    }
}
