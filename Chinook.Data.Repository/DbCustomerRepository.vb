'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports Chinook.Data
Imports Chinook.Domain.Entities
Imports Chinook.Data.DbCommandProvider
Imports System.Collections.ObjectModel


Namespace Chinook.Data.Repository

    <Global.System.ComponentModel.DataObjectAttribute(True)> _
    Public Class DbCustomerRepository
        Implements ICustomerRepository
        Implements IDisposable

        Private ReadOnly _dbCustomerCommandProvider As IDbCustomerCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbCustomerCommandProvider As IDbCustomerCommandProvider)
            _dbCustomerCommandProvider = dbCustomerCommandProvider
            _dbConnHolder = _dbCustomerCommandProvider.CustomerDbConnectionHolder
        End Sub


        ''' <summary>
        ''' Selects one or more records from the Customer table 
        ''' </summary>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Function GetData() As ICollection(Of Customer) Implements ICustomerRepository.GetData
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Customer)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Customer(reader.GetInt32("CustomerId"), reader.GetString("FirstName"), reader.GetString("LastName"), reader.GetString("Company"), reader.GetString("Address"), reader.GetString("City"), reader.GetString("State"), reader.GetString("Country"), reader.GetString("PostalCode"), reader.GetString("Phone"), reader.GetString("Fax"), reader.GetString("Email"), reader.GetInt32("SupportRepId"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Updates one or more records from the Customer table 
        ''' </summary>
        ''' <param name="CustomerId"></param>
        ''' <param name="FirstName"></param>
        ''' <param name="LastName"></param>
        ''' <param name="Company"></param>
        ''' <param name="Address"></param>
        ''' <param name="City"></param>
        ''' <param name="State"></param>
        ''' <param name="Country"></param>
        ''' <param name="PostalCode"></param>
        ''' <param name="Phone"></param>
        ''' <param name="Fax"></param>
        ''' <param name="Email"></param>
        ''' <param name="SupportRepId"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Sub Update(ByVal customerId As Int32, ByVal firstName As String, ByVal lastName As String, ByVal company As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String, ByVal supportRepId As Int32) Implements ICustomerRepository.Update
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetUpdateDbCommand(customerId, firstName, lastName, company, address, city, state, country, postalCode, phone, fax, email, supportRepId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        ''' Updates one or more records from the Customer table 
        ''' </summary>
        ''' <param name="Customer"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Sub Update(ByVal customer As Customer) Implements ICustomerRepository.Update
            With customer
                Update(.CustomerId, .FirstName, .LastName, .Company, .Address, .City, .State, .Country, .PostalCode, .Phone, .Fax, .Email, CInt(.SupportRepId))
            End With

        End Sub

        ''' <summary>
        ''' Inserts an entity of Customer into the database.
        ''' </summary>
        ''' <param name="CustomerId"></param>
        ''' <param name="FirstName"></param>
        ''' <param name="LastName"></param>
        ''' <param name="Company"></param>
        ''' <param name="Address"></param>
        ''' <param name="City"></param>
        ''' <param name="State"></param>
        ''' <param name="Country"></param>
        ''' <param name="PostalCode"></param>
        ''' <param name="Phone"></param>
        ''' <param name="Fax"></param>
        ''' <param name="Email"></param>
        ''' <param name="SupportRepId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Function Insert(ByVal customerId As Int32, ByVal firstName As String, ByVal lastName As String, ByVal company As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String, ByVal supportRepId As Int32) As Int32 Implements ICustomerRepository.Insert
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetInsertDbCommand(customerId, firstName, lastName, company, address, city, state, country, postalCode, phone, fax, email, supportRepId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Inserts an entity of Customer into the database.
        ''' </summary>
        ''' <param name="Customer"></param>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _
        Public Function Insert(ByVal customer As Customer) As Int32 Implements ICustomerRepository.Insert
            With customer
                Return Insert(.CustomerId, .FirstName, .LastName, .Company, .Address, .City, .State, .Country, .PostalCode, .Phone, .Fax, .Email, CInt(.SupportRepId))
            End With

        End Function

        ''' <summary>
        ''' Deletes one or more records from the Customer table 
        ''' </summary>
        ''' <param name="CustomerId"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Sub Delete(ByVal customerId As Int32) Implements ICustomerRepository.Delete
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetDeleteDbCommand(customerId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        ''' Deletes one or more records from the Customer table 
        ''' </summary>
        ''' <param name="Customer"></param>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _
        Public Sub Delete(ByVal customer As Customer) Implements ICustomerRepository.Delete
            With customer
                Delete(.CustomerId)
            End With

        End Sub

        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Customer
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="startRowIndex"></param>
        ''' <param name="MaximumRows"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetPageable(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32) As ICollection(Of Customer) Implements ICustomerRepository.GetPageable
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetPageableDbCommand(sortExpression, startRowIndex, maximumRows)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Customer)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Customer(reader.GetInt32("CustomerId"), reader.GetString("FirstName"), reader.GetString("LastName"), reader.GetString("Company"), reader.GetString("Address"), reader.GetString("City"), reader.GetString("State"), reader.GetString("Country"), reader.GetString("PostalCode"), reader.GetString("Phone"), reader.GetString("Fax"), reader.GetString("Email"), reader.GetInt32("SupportRepId"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Customer
        ''' </summary>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetRowCount() As Int32 Implements ICustomerRepository.GetRowCount
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByCustomerId returns a IDataReader for Customer
        ''' </summary>
        ''' <param name="CustomerId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByCustomerId(ByVal customerId As Int32) As ICollection(Of Customer) Implements ICustomerRepository.GetDataByCustomerId
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetDataByCustomerIdDbCommand(customerId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Customer)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Customer(reader.GetInt32("CustomerId"), reader.GetString("FirstName"), reader.GetString("LastName"), reader.GetString("Company"), reader.GetString("Address"), reader.GetString("City"), reader.GetString("State"), reader.GetString("Country"), reader.GetString("PostalCode"), reader.GetString("Phone"), reader.GetString("Fax"), reader.GetString("Email"), reader.GetInt32("SupportRepId"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataBySupportRepId returns a IDataReader for Customer
        ''' </summary>
        ''' <param name="SupportRepId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySupportRepId(ByVal supportRepId As Int32) As ICollection(Of Customer) Implements ICustomerRepository.GetDataBySupportRepId
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetDataBySupportRepIdDbCommand(supportRepId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Customer)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Customer(reader.GetInt32("CustomerId"), reader.GetString("FirstName"), reader.GetString("LastName"), reader.GetString("Company"), reader.GetString("Address"), reader.GetString("City"), reader.GetString("State"), reader.GetString("Country"), reader.GetString("PostalCode"), reader.GetString("Phone"), reader.GetString("Fax"), reader.GetString("Email"), reader.GetInt32("SupportRepId"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Customer
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="startRowIndex"></param>
        ''' <param name="MaximumRows"></param>
        ''' <param name="SupportRepId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySupportRepIdPageable(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal maximumRows As Int32, ByVal supportRepId As Int32) As ICollection(Of Customer) Implements ICustomerRepository.GetDataBySupportRepIdPageable
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetDataBySupportRepIdPageableDbCommand(sortExpression, startRowIndex, maximumRows, supportRepId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Customer)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Customer(reader.GetInt32("CustomerId"), reader.GetString("FirstName"), reader.GetString("LastName"), reader.GetString("Company"), reader.GetString("Address"), reader.GetString("City"), reader.GetString("State"), reader.GetString("Country"), reader.GetString("PostalCode"), reader.GetString("Phone"), reader.GetString("Fax"), reader.GetString("Email"), reader.GetInt32("SupportRepId"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Customer
        ''' </summary>
        ''' <param name="SupportRepId"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySupportRepIdRowCount(ByVal supportRepId As Int32) As Int32 Implements ICustomerRepository.GetDataBySupportRepIdRowCount
            Dim command As IDbCommand = _dbCustomerCommandProvider.GetGetDataBySupportRepIdRowCountDbCommand(supportRepId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function


#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace
