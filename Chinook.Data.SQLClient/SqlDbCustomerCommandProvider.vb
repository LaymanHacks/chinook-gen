'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports Chinook.Data.DbCommandProvider

Namespace Chinook.Data.SqlDbCommandProvider


    Public Class SqlDbCustomerCommandProvider
        Implements IDbCustomerCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName() As String Implements IDbCustomerCommandProvider.DbConnectionName
            Get
                Return "ChinookConnection"
            End Get
        End Property

        Public ReadOnly Property CustomerDbConnectionHolder() As DbConnectionHolder Implements IDbCustomerCommandProvider.CustomerDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        ''' Selects one or more records from the Customer table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbCustomerCommandProvider.GetGetDataDbCommand


            Dim command As New SqlCommand("Customer_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Updates one or more records from the Customer table 
        ''' </summary>
        ''' <param name="customerId" />
        ''' <param name="firstName" />
        ''' <param name="lastName" />
        ''' <param name="company" />
        ''' <param name="address" />
        ''' <param name="city" />
        ''' <param name="state" />
        ''' <param name="country" />
        ''' <param name="postalCode" />
        ''' <param name="phone" />
        ''' <param name="fax" />
        ''' <param name="email" />
        ''' <param name="supportRepId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand(ByVal customerId As Int32, ByVal firstName As String, ByVal lastName As String, ByVal company As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String, ByVal supportRepId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetUpdateDbCommand


            Dim command As New SqlCommand("Customer_Update")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.NVarChar, firstName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.NVarChar, lastName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Company", SqlDbType.NVarChar, company))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Address", SqlDbType.NVarChar, address))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@City", SqlDbType.NVarChar, city))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@State", SqlDbType.NVarChar, state))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Country", SqlDbType.NVarChar, country))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PostalCode", SqlDbType.NVarChar, postalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone", SqlDbType.NVarChar, phone))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Fax", SqlDbType.NVarChar, fax))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SupportRepId", SqlDbType.Int, supportRepId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Inserts a record into the Customer table on the database.
        ''' </summary>
        ''' <param name="customerId" />
        ''' <param name="firstName" />
        ''' <param name="lastName" />
        ''' <param name="company" />
        ''' <param name="address" />
        ''' <param name="city" />
        ''' <param name="state" />
        ''' <param name="country" />
        ''' <param name="postalCode" />
        ''' <param name="phone" />
        ''' <param name="fax" />
        ''' <param name="email" />
        ''' <param name="supportRepId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand(ByVal customerId As Int32, ByVal firstName As String, ByVal lastName As String, ByVal company As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal country As String, ByVal postalCode As String, ByVal phone As String, ByVal fax As String, ByVal email As String, ByVal supportRepId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetInsertDbCommand


            Dim command As New SqlCommand("Customer_Insert")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.NVarChar, firstName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.NVarChar, lastName))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Company", SqlDbType.NVarChar, company))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Address", SqlDbType.NVarChar, address))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@City", SqlDbType.NVarChar, city))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@State", SqlDbType.NVarChar, state))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Country", SqlDbType.NVarChar, country))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PostalCode", SqlDbType.NVarChar, postalCode))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone", SqlDbType.NVarChar, phone))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Fax", SqlDbType.NVarChar, fax))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SupportRepId", SqlDbType.Int, supportRepId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Deletes one or more records from the Customer table 
        ''' </summary>
        ''' <param name="customerId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand(ByVal customerId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetDeleteDbCommand


            Dim command As New SqlCommand("Customer_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Customer
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal pageSize As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetGetPageableDbCommand


            Dim command As New SqlCommand("Customer_GetPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Customer
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbCustomerCommandProvider.GetGetRowCountDbCommand


            Dim command As New SqlCommand("Customer_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataByCustomerId returns a IDataReader for Customer
        ''' </summary>
        ''' <param name="customerId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByCustomerIdDbCommand(ByVal customerId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetGetDataByCustomerIdDbCommand


            Dim command As New SqlCommand("Customer_GetDataByCustomerId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@CustomerId", SqlDbType.Int, customerId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetDataBySupportRepId returns a IDataReader for Customer
        ''' </summary>
        ''' <param name="supportRepId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySupportRepIdDbCommand(ByVal supportRepId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetGetDataBySupportRepIdDbCommand


            Dim command As New SqlCommand("Customer_GetDataBySupportRepId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SupportRepId", SqlDbType.Int, supportRepId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetPageable returns a IDataReader populated with a subset of data from Customer
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="startRowIndex" />
        ''' <param name="pageSize" />
        ''' <param name="supportRepId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySupportRepIdPageableDbCommand(ByVal sortExpression As String, ByVal startRowIndex As Int32, ByVal pageSize As Int32, ByVal supportRepId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetGetDataBySupportRepIdPageableDbCommand


            Dim command As New SqlCommand("Customer_GetDataBySupportRepIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@startRowIndex", SqlDbType.Int, startRowIndex))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SupportRepId", SqlDbType.Int, supportRepId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        ''' Function GetRowCount returns the row count for Customer
        ''' </summary>
        ''' <param name="supportRepId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySupportRepIdRowCountDbCommand(ByVal supportRepId As Int32) As IDbCommand Implements IDbCustomerCommandProvider.GetGetDataBySupportRepIdRowCountDbCommand


            Dim command As New SqlCommand("Customer_GetDataBySupportRepIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SupportRepId", SqlDbType.Int, supportRepId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


    End Class
End Namespace
