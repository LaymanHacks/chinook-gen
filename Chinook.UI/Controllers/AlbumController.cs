//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Routing;
using Chinook.Data.DbCommandProvider;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers
{
    public class AlbumController : ApiController
    {
        private readonly IAlbumRepository _dbRepository;

        public AlbumController(IDbAlbumCommandProvider sqlDbCommanProvider)
        {
            _dbRepository = new DbAlbumRepository(sqlDbCommanProvider);
        }

        [Route("api/albums/all")]
        [HttpGet]
        public IQueryable<Album> GetAlbums()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/albums", Name = "AlbumsPagableRoute")]
        public HttpResponseMessage GetAlbumsPagable(string sortExpression = "ArtistId", Int32 page = 0, Int32 pageSize = 10)
        {
           var albums= _dbRepository.GetPagableSubSet(sortExpression, page * pageSize, pageSize);
           var totalCount = _dbRepository.GetRowCount();
           var totalPages = (int)Math.Ceiling((double)totalCount / pageSize);

           var urlHelper = new UrlHelper(Request);
           var prevLink = page > 0 ? urlHelper.Link("AlbumsPagableRoute", new { page = page - 1, pageSize }) : "";
           var nextLink = page < totalPages - 1 ? urlHelper.Link("AlbumsPagableRoute", new { page = page + 1, pageSize }) : "";

           var result = new
           {
               TotalCount = totalCount,
               TotalPages = totalPages,
               PrevPageLink = prevLink,
               NextPageLink = nextLink,
               Results = albums
           };

           return Request.CreateResponse(HttpStatusCode.OK, result);

        }

        [Route("api/albums/{albumId:int:min(1)}")]
        [HttpGet]
        public Album GetDataByAlbumId(Int32 albumId)
        {
            return _dbRepository.GetDataByAlbumId(albumId).FirstOrDefault();
        }

        [Route("api/artist/{artistId}/albums/all")]
        [HttpGet]
        public IQueryable<Album> GetDataByArtistId(Int32 artistId)
        {
            return _dbRepository.GetDataByArtistId(artistId).AsQueryable();
        }

        [Route("api/artist/{artistId}/albums", Name = "AlbumsByArtistIdPagableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataByArtistIdPagableSubSet(Int32 artistId,string sortExpression = "ArtistId", Int32 page = 0, Int32 pageSize = 10)
        {
            var albums = _dbRepository.GetDataByArtistIdPagableSubSet(sortExpression, page * pageSize, pageSize, artistId);
            var totalCount =  _dbRepository.GetDataByArtistIdRowCount(artistId);
            var totalPages = (int)Math.Ceiling((double)totalCount / pageSize);

            var urlHelper = new UrlHelper(Request);
            var prevLink = page > 0 ? urlHelper.Link("AlbumsByArtistIdPagableRoute", new { page = page - 1, pageSize }) : "";
            var nextLink = page < totalPages - 1 ? urlHelper.Link("AlbumsByArtistIdPagableRoute", new { page = page + 1, pageSize }) : "";
 
            var result = new
            {
                TotalCount = totalCount,
                TotalPages = totalPages,
                PrevPageLink = prevLink,
                NextPageLink = nextLink,
                Results = albums
            };

            return Request.CreateResponse(HttpStatusCode.OK, result);
        }

        public void Update(Int32 albumId, string title, Int32 artistId)
        {
            _dbRepository.Update(albumId, title, artistId);
        }

        public Int32 Insert(Int32 albumId, string title, Int32 artistId)
        {
            return _dbRepository.Insert(albumId, title, artistId);
        }

        public void Delete(Int32 albumId)
        {
            _dbRepository.Delete(albumId);
        }

    }
}