'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports Chinook.Data
Imports Chinook.Domain.Entities
Imports Chinook.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace Chinook.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbInvoiceRepository
        Implements IInvoiceRepository
        Implements IDisposable

        Private ReadOnly _dbInvoiceCommandProvider As IDbInvoiceCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbInvoiceCommandProvider As IDbInvoiceCommandProvider)
            _dbInvoiceCommandProvider = dbInvoiceCommandProvider
            _dbConnHolder =_dbInvoiceCommandProvider.InvoiceDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the Invoice table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of Invoice) Implements IInvoiceRepository.GetData
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Invoice)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Invoice( reader.GetInt32("InvoiceId"),  reader.GetInt32("CustomerId"),  reader.GetDateTime("InvoiceDate"),  reader.GetString("BillingAddress") ,  reader.GetString("BillingCity") ,  reader.GetString("BillingState") ,  reader.GetString("BillingCountry") ,  reader.GetString("BillingPostalCode") ,  reader.GetDecimal("Total") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the Invoice table 
    ''' </summary>
   ''' <param name="InvoiceId"></param>
   ''' <param name="CustomerId"></param>
   ''' <param name="InvoiceDate"></param>
   ''' <param name="BillingAddress"></param>
   ''' <param name="BillingCity"></param>
   ''' <param name="BillingState"></param>
   ''' <param name="BillingCountry"></param>
   ''' <param name="BillingPostalCode"></param>
   ''' <param name="Total"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal invoiceId As Int32,  ByVal customerId As Int32,  ByVal invoiceDate As DateTime,  ByVal billingAddress As String,  ByVal billingCity As String,  ByVal billingState As String,  ByVal billingCountry As String,  ByVal billingPostalCode As String,  ByVal total As Decimal)  Implements IInvoiceRepository.Update
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetUpdateDbCommand(InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the Invoice table 
    ''' </summary>
    ''' <param name="Invoice"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal invoice as Invoice)  Implements IInvoiceRepository.Update
             With Invoice
                Update(CInt(.InvoiceId), CInt(.CustomerId), CDate(.InvoiceDate), .BillingAddress, .BillingCity, .BillingState, .BillingCountry, .BillingPostalCode, CDec(.Total))
            End With

        End Sub

        ''' <summary>
        ''' Inserts an entity of Invoice into the database.
        ''' </summary>
        ''' <param name="InvoiceId"></param>
        ''' <param name="CustomerId"></param>
        ''' <param name="InvoiceDate"></param>
        ''' <param name="BillingAddress"></param>
        ''' <param name="BillingCity"></param>
        ''' <param name="BillingState"></param>
        ''' <param name="BillingCountry"></param>
        ''' <param name="BillingPostalCode"></param>
        ''' <param name="Total"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Function Insert(ByVal invoiceId As Int32, ByVal customerId As Int32, ByVal invoiceDate As DateTime, ByVal billingAddress As String, ByVal billingCity As String, ByVal billingState As String, ByVal billingCountry As String, ByVal billingPostalCode As String, ByVal total As Decimal) As Int32 Implements IInvoiceRepository.Insert
            Dim command As IDbCommand = _dbInvoiceCommandProvider.GetInsertDbCommand(InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Inserts an entity of Invoice into the database.
        ''' </summary>
        ''' <param name="Invoice"></param>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _
        Public Function Insert(ByVal invoice As Invoice) As Int32 Implements IInvoiceRepository.Insert
            With Invoice
                Return Insert(CInt(.InvoiceId), CInt(.CustomerId), CDate(.InvoiceDate), .BillingAddress, .BillingCity, .BillingState, .BillingCountry, .BillingPostalCode, CDec(.Total))
            End With

        End Function
  
    ''' <summary>
    ''' Deletes one or more records from the Invoice table 
    ''' </summary>
   ''' <param name="InvoiceId"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal invoiceId As Int32)  Implements IInvoiceRepository.Delete
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetDeleteDbCommand(InvoiceId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the Invoice table 
    ''' </summary>
    ''' <param name="Invoice"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal invoice as Invoice)  Implements IInvoiceRepository.Delete
             With Invoice
Delete( CInt(.InvoiceId))
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Invoice
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Invoice) Implements IInvoiceRepository.GetDataPageable
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Invoice)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Invoice( reader.GetInt32("InvoiceId"),  reader.GetInt32("CustomerId"),  reader.GetDateTime("InvoiceDate"),  reader.GetString("BillingAddress") ,  reader.GetString("BillingCity") ,  reader.GetString("BillingState") ,  reader.GetString("BillingCountry") ,  reader.GetString("BillingPostalCode") ,  reader.GetDecimal("Total") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Invoice
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IInvoiceRepository.GetRowCount
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByInvoiceId returns a IDataReader for Invoice
    ''' </summary>
   ''' <param name="InvoiceId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByInvoiceId( ByVal invoiceId As Int32)  as ICollection(Of Invoice) Implements IInvoiceRepository.GetDataByInvoiceId
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataByInvoiceIdDbCommand(InvoiceId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Invoice)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Invoice( reader.GetInt32("InvoiceId"),  reader.GetInt32("CustomerId"),  reader.GetDateTime("InvoiceDate"),  reader.GetString("BillingAddress") ,  reader.GetString("BillingCity") ,  reader.GetString("BillingState") ,  reader.GetString("BillingCountry") ,  reader.GetString("BillingPostalCode") ,  reader.GetDecimal("Total") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByCustomerId returns a IDataReader for Invoice
    ''' </summary>
   ''' <param name="CustomerId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByCustomerId( ByVal customerId As Int32)  as ICollection(Of Invoice) Implements IInvoiceRepository.GetDataByCustomerId
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataByCustomerIdDbCommand(CustomerId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Invoice)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Invoice( reader.GetInt32("InvoiceId"),  reader.GetInt32("CustomerId"),  reader.GetDateTime("InvoiceDate"),  reader.GetString("BillingAddress") ,  reader.GetString("BillingCity") ,  reader.GetString("BillingState") ,  reader.GetString("BillingCountry") ,  reader.GetString("BillingPostalCode") ,  reader.GetDecimal("Total") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByCustomerIdPageable returns a IDataReader populated with a subset of data from Invoice
    ''' </summary>
   ''' <param name="CustomerId"></param>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByCustomerIdPageable( ByVal customerId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Invoice) Implements IInvoiceRepository.GetDataByCustomerIdPageable
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataByCustomerIdPageableDbCommand(CustomerId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Invoice)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Invoice( reader.GetInt32("InvoiceId"),  reader.GetInt32("CustomerId"),  reader.GetDateTime("InvoiceDate"),  reader.GetString("BillingAddress") ,  reader.GetString("BillingCity") ,  reader.GetString("BillingState") ,  reader.GetString("BillingCountry") ,  reader.GetString("BillingPostalCode") ,  reader.GetDecimal("Total") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Invoice
    ''' </summary>
   ''' <param name="CustomerId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByCustomerIdRowCount( ByVal customerId As Int32)  as Int32 Implements IInvoiceRepository.GetDataByCustomerIdRowCount
        Dim command As IDbCommand = _dbInvoiceCommandProvider.GetGetDataByCustomerIdRowCountDbCommand(CustomerId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
