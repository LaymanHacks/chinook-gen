//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class CustomerApiController : ApiController
    {
        private readonly ICustomerRepository _dbRepository;

        public CustomerApiController(ICustomerRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }

        [Route("api/customers/all", Name = "CustomersGetDataRoute")]
        [HttpGet]
        public IQueryable<Customer> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/customers", Name = "CustomersUpdateRoute")]
        [HttpPut]
        public void Update(Customer customer)
        {
            _dbRepository.Update((Int32)customer.CustomerId, (string)customer.FirstName, (string)customer.LastName, customer.Company, customer.Address, customer.City, customer.State, customer.Country, customer.PostalCode, customer.Phone, customer.Fax, (string)customer.Email, customer.SupportRepId);
        }

        [Route("api/customers", Name = "CustomersInsertRoute")]
        [HttpPost]
        public Int32 Insert(Customer customer)
        {
            return _dbRepository.Insert((Int32)customer.CustomerId, (string)customer.FirstName, (string)customer.LastName, customer.Company, customer.Address, customer.City, customer.State, customer.Country, customer.PostalCode, customer.Phone, customer.Fax, (string)customer.Email, customer.SupportRepId);
        }

        [Route("api/customers", Name = "CustomersDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 customerId)
        {
            try
            {
                _dbRepository.Delete(customerId);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/customers", Name = "CustomersGetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "CustomersGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/customers/{customerId}", Name = "CustomersGetDataByCustomerIdRoute")]
        [HttpGet]
        public IQueryable<Customer> GetDataByCustomerId(Int32 customerId)
        {
            return _dbRepository.GetDataByCustomerId(customerId).AsQueryable();
        }

        [Route("api/employees/{supportRepId}/customers/all", Name = "CustomersGetDataBySupportRepIdRoute")]
        [HttpGet]
        public IQueryable<Customer> GetDataBySupportRepId(Int32 supportRepId)
        {
            return _dbRepository.GetDataBySupportRepId(supportRepId).AsQueryable();
        }

        [Route("api/employees/{supportRepId}/customers", Name = "CustomersGetDataBySupportRepIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataBySupportRepIdPageable(Int32 supportRepId, String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataBySupportRepIdPageable(supportRepId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataBySupportRepIdRowCount(supportRepId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "CustomersGetDataBySupportRepIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
