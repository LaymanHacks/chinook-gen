//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;
using Chinook.UI.Web.Controllers.Api;

namespace Chinook.UI.Web.Tests.Controllers.Api
{
    [TestClass()]
    public class InvoiceLineApiControllerTests
    {

        private Mock<IInvoiceLineRepository> _repository;

        private List<InvoiceLine> _repositoryList = new List<InvoiceLine>
        {
            new InvoiceLine(1,1,2,0.99m,1),
            new InvoiceLine(2,1,2,0.99m,1),
            new InvoiceLine(3,2,2,0.99m,1),
            new InvoiceLine(4,2,8,0.99m,1),
            new InvoiceLine(5,2,10,0.99m,1),
            new InvoiceLine(6,2,12,0.99m,1),
            new InvoiceLine(7,3,16,0.99m,1),
            new InvoiceLine(8,3,20,0.99m,1),
            new InvoiceLine(9,3,24,0.99m,1),
            new InvoiceLine(10,3,28,0.99m,1)
        };

        private InvoiceLineApiController _target;

        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IInvoiceLineRepository>();
            _target = new InvoiceLineApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/InvoiceLines") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }

        [TestMethod()]
        public void GetDataTest()
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);

            var result = _target.GetData().ToList();
            Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_InvoiceLine()
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Decimal>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, Int32, Decimal, Int32>((invoiceLineId, invoiceId, trackId, unitPrice, quantity) =>
                 {
                     var tInvoiceLine = _repositoryList.Find(x => x.InvoiceLineId == invoiceLineId);
                     tInvoiceLine.InvoiceId = invoiceId;
                     tInvoiceLine.TrackId = trackId;
                     tInvoiceLine.UnitPrice = unitPrice;
                     tInvoiceLine.Quantity = quantity;
                 });
            var tempInvoiceLine = _repositoryList.Find(x => x.InvoiceLineId == 1);
            var testInvoiceLine = new InvoiceLine
            {
                InvoiceLineId = tempInvoiceLine.InvoiceLineId,
                InvoiceId = tempInvoiceLine.InvoiceId,
                TrackId = tempInvoiceLine.TrackId,
                UnitPrice = tempInvoiceLine.UnitPrice,
                Quantity = tempInvoiceLine.Quantity
            };

            testInvoiceLine.UnitPrice = 5m; 
            _target.Update(testInvoiceLine);
            Assert.AreEqual(5m, _repositoryList.Find(x => x.InvoiceLineId==1).UnitPrice);
           
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_InvoiceLine()
        {
            _repository
                .Setup(
                    it =>
                        it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Decimal>(),
                            It.IsAny<Int32>()))
                .Returns<Int32, Int32, Int32, Decimal, Int32>(
                    (invoiceLineId, invoiceId, trackId, unitPrice, quantity) =>
                    {
                        _repositoryList.Add(new InvoiceLine(invoiceLineId, invoiceId, trackId, unitPrice, quantity));
                        return invoiceLineId;
                    });

            _target.Insert(new InvoiceLine(11, 1, 1, (decimal)1.0, 1));
            Assert.AreEqual(11, _repositoryList.Count());
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_InvoiceLine()
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))
                 .Callback<Int32>((invoiceLineId) =>
                 {
                     var i = _repositoryList.FindIndex(q => q.InvoiceLineId == invoiceLineId);
                     _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<InvoiceLine> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList;
                     switch (sortExpression)
                     {
                         case "InvoiceLineId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceLineId));
                             break;
                         case "InvoiceId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceId));
                             break;
                         case "TrackId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.TrackId));
                             break;
                         case "UnitPrice":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.UnitPrice));
                             break;
                         case "Quantity":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.Quantity));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("InvoiceLineId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.InvoiceLineId).FirstOrDefault().InvoiceLineId, expectedResult.Results.FirstOrDefault().InvoiceLineId);
            Assert.AreEqual(_repositoryList.ToList().Count, expectedResult.TotalCount);
        }

        [TestMethod()]
        public void GetDataByInvoiceLineIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByInvoiceLineId(It.IsAny<Int32>()))
                     .Returns<Int32>((invoiceLineId) =>
                     {
                         return _repositoryList.Where(x => x.InvoiceLineId == invoiceLineId).ToList();
                     });

            var result = _target.GetDataByInvoiceLineId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.InvoiceLineId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByInvoiceIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByInvoiceId(It.IsAny<Int32>()))
                     .Returns<Int32>((invoiceId) =>
                     {
                         return _repositoryList.Where(x => x.InvoiceId == invoiceId).ToList();
                     });

            var result = _target.GetDataByInvoiceId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.InvoiceId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByInvoiceIdPageableTest()
        {
            PagedResult<InvoiceLine> expectedResult;

            _repository
                 .Setup(it => it.GetDataByInvoiceIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((invoiceId, sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList.Where(x => x.InvoiceId == invoiceId);
                     switch (sortExpression)
                     {
                         case "InvoiceLineId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceLineId));
                             break;
                         case "InvoiceId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceId));
                             break;
                         case "TrackId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.TrackId));
                             break;
                         case "UnitPrice":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.UnitPrice));
                             break;
                         case "Quantity":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.Quantity));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByInvoiceIdRowCount(1))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByInvoiceIdPageable(1, "InvoiceLineId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.InvoiceId == 1).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.InvoiceId == 1).OrderBy(q => q.InvoiceLineId).FirstOrDefault().InvoiceLineId, expectedResult.Results.FirstOrDefault().InvoiceLineId);

        }

        [TestMethod()]
        public void GetDataByTrackIdTest()
        {
            _repository
                 .Setup(it => it.GetDataByTrackId(It.IsAny<Int32>()))
                     .Returns<Int32>((trackId) => _repositoryList.Where(x => x.TrackId == trackId).ToList());

            var result = _target.GetDataByTrackId(1).ToList();
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 1).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByTrackIdPageableTest()
        {
            PagedResult<InvoiceLine> expectedResult;

            _repository
                 .Setup(it => it.GetDataByTrackIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((trackId, sortExpression, page, pageSize) =>
                 {
                     var query = _repositoryList.Where(x => x.TrackId == trackId);
                     switch (sortExpression)
                     {
                         case "InvoiceLineId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceLineId));
                             break;
                         case "InvoiceId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.InvoiceId));
                             break;
                         case "TrackId":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.TrackId));
                             break;
                         case "UnitPrice":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.UnitPrice));
                             break;
                         case "Quantity":
                             query = new List<InvoiceLine>(query.OrderBy(q => q.Quantity));
                             break;
                     }
                     return query.Take(pageSize).Skip((page - 1) * pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByTrackIdRowCount(1))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByTrackIdPageable(2, "InvoiceLineId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 2).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.TrackId == 2).OrderBy(q => q.InvoiceLineId).FirstOrDefault().InvoiceLineId, expectedResult.Results.FirstOrDefault().InvoiceLineId);
        }


    }
}
