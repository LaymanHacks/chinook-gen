//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Chinook.Data.Repository;
using Chinook.Domain.Entities;

namespace Chinook.Web.UI.Controllers.Api
{
    public class AlbumApiController : ApiController
    {
        private readonly IAlbumRepository _dbRepository;

        public AlbumApiController(IAlbumRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }

        [Route("api/albums/all", Name = "AlbumsGetDataRoute")]
        [HttpGet]
        public IQueryable<Album> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/albums", Name = "AlbumsUpdateRoute")]
        [HttpPut]
        public void Update(Album album)
        {
            _dbRepository.Update((Int32)album.AlbumId, (string)album.Title, (Int32)album.ArtistId);
        }

        [Route("api/albums", Name = "AlbumsInsertRoute")]
        [HttpPost]
        public Int32 Insert(Album album)
        {
            return _dbRepository.Insert((Int32)album.AlbumId, (string)album.Title, (Int32)album.ArtistId);
        }

        [Route("api/albums", Name = "AlbumsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 albumId)
        {
            try
            {
                _dbRepository.Delete(albumId);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

        }

        [Route("api/albums", Name = "AlbumsGetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "AlbumsGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/albums/{albumId}", Name = "AlbumsGetDataByAlbumIdRoute")]
        [HttpGet]
        public IQueryable<Album> GetDataByAlbumId(Int32 albumId)
        {
            return _dbRepository.GetDataByAlbumId(albumId).AsQueryable();
        }

        [Route("api/artists/{artistId}/albums/all", Name = "AlbumsGetDataByArtistIdRoute")]
        [HttpGet]
        public IQueryable<Album> GetDataByArtistId(Int32 artistId)
        {
            return _dbRepository.GetDataByArtistId(artistId).AsQueryable();
        }

        [Route("api/artists/{artistId}/albums", Name = "AlbumsGetDataByArtistIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataByArtistIdPageable(Int32 artistId, String sortExpression, Int32 page, Int32 pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataByArtistIdPageable(artistId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByArtistIdRowCount(artistId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "AlbumsGetDataByArtistIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
